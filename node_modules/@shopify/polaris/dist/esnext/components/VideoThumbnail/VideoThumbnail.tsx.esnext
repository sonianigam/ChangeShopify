import React$1 from 'react';
import { useI18n } from '../../utilities/i18n/hooks.tsx.esnext';
import { secondsToDurationTranslationKey, secondsToTimeComponents, secondsToTimestamp } from '../../utilities/duration.ts.esnext';
import img from './illustrations/play.svg.esnext';
import styles from './VideoThumbnail.scss.esnext';

function VideoThumbnail({
  thumbnailUrl,
  videoLength,
  accessibilityLabel,
  onClick,
  onBeforeStartPlaying
}) {
  const i18n = useI18n();
  let buttonLabel;

  if (accessibilityLabel) {
    buttonLabel = accessibilityLabel;
  } else if (videoLength) {
    const {
      hours,
      minutes,
      seconds
    } = secondsToTimeComponents(videoLength);
    buttonLabel = i18n.translate('Polaris.VideoThumbnail.playButtonA11yLabel.defaultWithDuration', {
      duration: i18n.translate(secondsToDurationTranslationKey(videoLength), {
        hourCount: hours,
        minuteCount: minutes,
        secondCount: seconds
      })
    });
  } else {
    buttonLabel = i18n.translate('Polaris.VideoThumbnail.playButtonA11yLabel.default');
  }

  const timeStampMarkup = videoLength ? /*#__PURE__*/React$1.createElement("p", {
    className: styles.Timestamp
  }, secondsToTimestamp(videoLength)) : null;
  return /*#__PURE__*/React$1.createElement("div", {
    className: styles.Thumbnail,
    style: {
      backgroundImage: `url(${thumbnailUrl})`
    }
  }, /*#__PURE__*/React$1.createElement("button", {
    type: "button",
    className: styles.PlayButton,
    "aria-label": buttonLabel,
    onClick: onClick,
    onMouseEnter: onBeforeStartPlaying,
    onFocus: onBeforeStartPlaying,
    onTouchStart: onBeforeStartPlaying
  }, /*#__PURE__*/React$1.createElement("img", {
    className: styles.PlayIcon,
    src: img,
    alt: ""
  })), timeStampMarkup);
}

export { VideoThumbnail };
